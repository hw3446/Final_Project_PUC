---
title: "Ordinal regression: model selection"
format: html
author: "Hannah Wilkie"
execute:
  warning: false
---

```{r}
library(tidyverse)
library(MASS)
library(dplyr)
library(corrplot)
library(car)
library(knitr)
```

In this section, we'll experiment with the step() function in R to help select ordinal regression models for our data.

step() is not compatible with clm(), which is why we'll use polr().

The step() function starts with a full model containing all the possible main effects (in this case all the possible demographic variables). It tests different combinations of variables and then keeps the model with the lowest AIC.

This is helpful when we're dealing with lots of different outcome variables and lots of demographic inputs and we need to figure out which ones to use.

Here's how we'd run the step() function starting with all the demographic variables and using just fictional story as our outcome.

First some data loading, and demographic variable tidying.

```{r}
data1 <- read_csv("https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/posts/Dataset_overview/working_data/data.csv")

data2 <- read_csv("https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/posts/Dataset_overview/working_data/data2.csv")
```

```{r}
outcome_vars <- c("Fictional_story", "Abstract_shapes", "Sensory_sensations", 
                  "Life_experiences", "Media", "Music", "Future_plans", 
                  "Building", "Everyday")

# Converting outcome variables to factors with consistent levels for each thought type
data1[outcome_vars] <- lapply(data1[outcome_vars], factor, 
                             levels = c("Not at all", "A small amount of the time", 
                                        "A moderate amount of the time", "Most of the time", 
                                        "All of the time"))

data2[outcome_vars] <- lapply(data2[outcome_vars], factor, 
                             levels = c("Not at all", "A small amount of the time", 
                                        "A moderate amount of the time", "Most of the time", 
                                        "All of the time"))

#Remaking the floor variable
data1 <- data1 %>%
  mutate(Floor = ifelse(Location %in% c("A", "B", "C", "D", "E", "F"), "Downstairs", "Upstairs")) %>% relocate(Floor, .after = Location)

data2 <- data2 %>%
  mutate(Floor = ifelse(Location %in% c("A", "B", "C", "D", "E", "F"), "Downstairs", "Upstairs")) %>% relocate(Floor, .after = Location)

#Making sure demographic variables are classed in the right way.
data1$Age <- as.numeric(data1$Age)
data2$Age <- as.numeric(data2$Age)
data1$Practice <- as.numeric(as.character(data1$Practice))
data2$Practice <- as.numeric(as.character(data2$Practice))
data1$Gender <- factor(data1$Gender,  levels = c('Male', 'Female', 'Other'))
data2$Gender <- factor(data2$Gender,  levels = c('Male', 'Female', 'Other'))
data1$Music_listening <- factor(data1$Music_listening, levels = c('Very rarely', 'Somewhat rarely', 'Moderately frequently', 'Frequently', 'Very frequently'))
data2$Music_listening <- factor(data2$Music_listening, levels = c('Very rarely', 'Somewhat rarely', 'Moderately frequently', 'Frequently', 'Very frequently'))
data1$Floor <- factor(data1$Floor, levels = c('Downstairs', 'Upstairs'))
data2$Floor <- factor(data2$Floor, levels = c('Downstairs', 'Upstairs'))
```

We have some NAs in our dataframe, so before running the models, we need to figure out what to do with these.

Let's get a map of our missing data:

```{r}

library(Amelia)
demographics_outcomes <- c('Age', 'Gender', 'Music_listening', 'Practice', 'Floor', "Fictional_story", "Abstract_shapes", "Sensory_sensations", 
                  "Life_experiences", "Media", "Music", "Future_plans", 
                  "Building", "Everyday")

dem_out <- dplyr::select(data1, all_of(demographics_outcomes))
missmap(dem_out)

```

We can hypothesise that the data is MCAR (missing completely at random), i.e. that missing values aren't correlated with any particular variables. Let's test this.

```{r}
library(naniar)
mcar_test(dem_out)
```

p \> 0.05, so there is insufficient evidence to reject the null hypothesis that the data is MCAR.

Based on this, we can use multiple imputation to deal with the NAs. This has the advantage of preserving the data structure and reflecting uncertainty without data loss.

```{r}
library(mice)
imputed_data1 <- mice(data1, m = 5, method = 'pmm', seed = 123, print = FALSE)
completed_data1 <- complete(imputed_data1, 1)
```

Let's now run the step() function with our imputed data for fictional story.

1.  Start by specifying the model with with maximum number of demographic inputs.

```{r}
model_fiction_imp <- polr(Fictional_story ~ Age + Gender + Music_listening + Practice + Floor, 
              data = completed_data1, Hess = TRUE, method = "logistic")

stepwise_model_imp <- step(model_fiction_imp)

summary(stepwise_model_imp)
```

Here step() ran through all the possible demographics to find the model with the lowest AIC. In this case the most successful model was one with just age as a demographic input.

We can run the step() function looping through all the possible outcome variables using the imputed data.

```{r}
# List to store results
models <- list()
stepwise_models <- list()

# Loop through selected outcomes
for (outcome in outcome_vars) {
  formula <- as.formula(paste(outcome, "~ Age + Gender + Music_listening + Practice + Floor"))

  tryCatch({
    # Fit proportional odds model
    model <- polr(formula, data = completed_data1, Hess = TRUE, method = "logistic", 
                  control = list(maxit = 1000), na.action = na.exclude)
    
    # Store model
    models[[outcome]] <- model
    
    # Print summary
    cat("\nSummary for", outcome, ":\n")
    print(summary(model))
    
    # Perform stepwise regression
    step_model <- step(model, direction = "backward", trace = FALSE)
    stepwise_models[[outcome]] <- step_model
    
    # Print stepwise summary
    cat("\nStepwise Model Summary for", outcome, ":\n")
    print(summary(step_model))
    
  }, error = function(e) {
    cat("\nSkipping", outcome, "due to error:", conditionMessage(e), "\n")
  })
}

```

From the above, we can see that the models with the lowest AIC (using just main effects) are as follows:

-   Fictional story: polr(formula = Fictional_story \~ Age, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Abstract shapes: polr(formula = Abstract_shapes \~ Age, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Sensory sensations: polr(formula = Sensory_sensations \~ 1, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Life experiences: polr(formula = Life_experiences \~ Age + Gender, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Media: polr(formula = Media \~ Age, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Music: polr(formula = Music \~ Music_listening + Practice, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Future plans: polr(formula = Future_plans \~ Age, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Building: polr(formula = Building \~ Age + Gender + Music_listening + Floor, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

-   Everyday: polr(formula = Everyday \~ Age, data = completed_data1, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "probit")

Let's also look at the interactions between the demographic variables and check for multicollinearity.

```{r}
library(conflicted)
conflict_prefer("filter", "dplyr")

demographics <- c('Age', 'Gender', 'Music_listening', 'Practice', 'Floor')
demographics_data <- dplyr::select(data1, all_of(demographics))

# Convert categorical variables to numeric
demographics_numeric <- demographics_data %>%
  mutate(
    Gender = as.numeric(factor(Gender)),
    Music_listening = as.numeric(factor(Music_listening, ordered = TRUE)),  
    Floor = as.numeric(factor(Floor))
  ) 

# Compute correlation matrix
cor_matrix <- cor(demographics_numeric, use = "pairwise.complete.obs")

corrplot(cor_matrix, method = "color", type = "lower", 
         tl.col = "black", tl.srt = 45, addCoef.col = "white", 
         col = colorRampPalette(c("blue", "white", "red"))(200))


#Checking for collinearity
model1 <- lm(Age ~ Practice + Gender + Music_listening + Floor, data = demographics_numeric)
model2 <- lm(Gender ~ Age + Practice + Music_listening + Floor, data = demographics_numeric)
model3 <- lm(Practice ~ Age + Gender + Music_listening + Floor, data = demographics_numeric)
model4 <- lm(Music_listening ~ Age + Gender + Practice + Floor, data = demographics_numeric)
model5 <- lm(Floor ~ Age + Gender + Practice + Music_listening, data = demographics_numeric)
vif(model1)
vif(model2)
vif(model3)
vif(model4)
vif(model5)
```

All vif() outputs are close to 1, indicating that multicollinearity shouldn't be a problem.

In the post on 'Ordinal regression: final models', we'll use these step() results to run some final model visualisations.

Rerunning the above steps for the second dataset:

```{r}
imputed_data2 <- mice(data2, m = 5, method = 'pmm', seed = 123, print = FALSE)
completed_data2 <- complete(imputed_data2, 1)
```

```{r}
# List to store results
models <- list()
stepwise_models <- list()

# Loop through selected outcomes
for (outcome in outcome_vars) {
  formula <- as.formula(paste(outcome, "~ Age + Gender + Music_listening + Practice + Floor"))

  tryCatch({
    # Fit proportional odds model
    model <- polr(formula, data = completed_data2, Hess = TRUE, method = "logistic", 
                  control = list(maxit = 1000), na.action = na.exclude)
    
    # Store model
    models[[outcome]] <- model
    
    # Print summary
    cat("\nSummary for", outcome, ":\n")
    print(summary(model))
    
    # Perform stepwise regression
    step_model <- step(model, direction = "backward", trace = FALSE)
    stepwise_models[[outcome]] <- step_model
    
    # Print stepwise summary
    cat("\nStepwise Model Summary for", outcome, ":\n")
    print(summary(step_model))
    
  }, error = function(e) {
    cat("\nSkipping", outcome, "due to error:", conditionMessage(e), "\n")
  })
}

```

Here are the models for the second half of the data.

Models that match with the first half:

-   polr(formula = Fictional_story \~ Age, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

-   polr(formula = Sensory_sensations \~ 1, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

-   polr(formula = Media \~ Age, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

-   polr(formula = Future_plans \~ Age, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

-   polr(formula = Everyday \~ Age, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

Models that don't match the first half:

-   polr(formula = Abstract_shapes \~ 1, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

-   polr(formula = Life_experiences \~ Age, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

-   polr(formula = Music \~ Age + Gender + Practice, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")

-   polr(formula = Building \~ Floor, data = completed_data2, control = list(maxit = 1000), na.action = na.exclude, Hess = TRUE, method = "logistic")
