[
  {
    "objectID": "posts/Modelling_1/Modelling 1.html",
    "href": "posts/Modelling_1/Modelling 1.html",
    "title": "Ordinal regression: an overview",
    "section": "",
    "text": "library(tidyverse)\nlibrary(broom)\nlibrary(performance)\nlibrary(ordinal)\nlibrary(car)\nlibrary(ggeffects)\nlibrary(gofcat) \nlibrary(brms)\nlibrary(emmeans)\nlibrary(knitr)\nlibrary(MASS)\n\nIn this section, we’ll discuss how to model some of our data using ordinal regression. This will examine the relationship between demographic data and thought types.\nLet’s reload our data from each half of the concert:\n\ndata1 &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/posts/Dataset_overview/working_data/data.csv\")\n\ndata2 &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/posts/Dataset_overview/working_data/data2.csv\")\n\nBefore constructing models, we’ll make sure all of our demographic and outcome variables are classed in the right way.\n\noutcome_vars &lt;- c(\"Fictional_story\", \"Abstract_shapes\", \"Sensory_sensations\", \n                  \"Life_experiences\", \"Media\", \"Music\", \"Future_plans\", \n                  \"Building\", \"Everyday\")\n\n# Converting outcome variables to factors with consistent levels for each thought type\ndata1[outcome_vars] &lt;- lapply(data1[outcome_vars], factor, \n                             levels = c(\"Not at all\", \"A small amount of the time\", \n                                        \"A moderate amount of the time\", \"Most of the time\", \n                                        \"All of the time\"))\n\ndata2[outcome_vars] &lt;- lapply(data2[outcome_vars], factor, \n                             levels = c(\"Not at all\", \"A small amount of the time\", \n                                        \"A moderate amount of the time\", \"Most of the time\", \n                                        \"All of the time\"))\n\n#Just remaking the floor variable\ndata1 &lt;- data1 %&gt;%\n  mutate(Floor = ifelse(Location %in% c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), \"Downstairs\", \"Upstairs\")) %&gt;% relocate(Floor, .after = Location)\n\ndata2 &lt;- data2 %&gt;%\n  mutate(Floor = ifelse(Location %in% c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), \"Downstairs\", \"Upstairs\")) %&gt;% relocate(Floor, .after = Location)\n\n#Making sure demographic variables are classed in the right way.\ndata1$Age &lt;- as.numeric(data1$Age)\ndata2$Age &lt;- as.numeric(data2$Age)\ndata1$Practice &lt;- as.numeric(as.character(data1$Practice))\ndata2$Practice &lt;- as.numeric(as.character(data2$Practice))\ndata1$Gender &lt;- factor(data1$Gender,  levels = c('Male', 'Female', 'Other'))\ndata2$Gender &lt;- factor(data2$Gender,  levels = c('Male', 'Female', 'Other'))\ndata1$Music_listening &lt;- factor(data1$Music_listening, levels = c('Very rarely', 'Somewhat rarely', 'Moderately frequently', 'Frequently', 'Very frequently'))\ndata2$Music_listening &lt;- factor(data2$Music_listening, levels = c('Very rarely', 'Somewhat rarely', 'Moderately frequently', 'Frequently', 'Very frequently'))\ndata1$Floor &lt;- factor(data1$Floor, levels = c('Downstairs', 'Upstairs'))\ndata2$Floor &lt;- factor(data2$Floor, levels = c('Downstairs', 'Upstairs'))\n\nLet’s start with a simple model that considers the relationship between a demographic and the likelihood of imagining a fictional story based on a particular demographic variable.\nHere’s a plot showing the percentage of participants in each ordinal level for fictional story, by gender and age. We’re inoring N/As for now:\n\ndata1 &lt;- data1 %&gt;%\n  filter(!is.na(Age) & !is.na(Gender) & !is.na(Fictional_story)) %&gt;% filter(Gender != 'Other')\n\nfiction_gender &lt;- data1 %&gt;%\n  group_by(Fictional_story, Gender) %&gt;% summarise(Count = n(), .groups = 'drop') %&gt;%\n  mutate('Percentage' = Count / sum(Count) * 100)\n\nggplot(fiction_gender, aes(x = Fictional_story, y = Percentage, fill = Gender)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Level\", y = \"Percentage\", fill = \"Gender\") +\n  ggtitle(\"Percentage in Each Level for Fictional Story by Gender\") +\n  theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\nfiction_age &lt;- data1 %&gt;%\n  group_by(Fictional_story, Age) %&gt;% summarise(Count = n(), .groups = 'drop') %&gt;%\n  mutate('Percentage' = Count / sum(Count) * 100)\n\nfiction_age %&gt;% \n  ggplot(aes(x = Fictional_story, y = Age, fill = Fictional_story)) +\n  geom_boxplot() +\n  xlab(\"Level\") + theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nHere’s an alternative visualisation with age as a gouped variable:\n\nmax_age &lt;- max(data1$Age, na.rm = TRUE)\nmin_age &lt;- min(data1$Age, na.rm = TRUE)\n\nbreaks &lt;- c(seq(min_age, max_age - 1, by = 20), max_age)\n\ndata1 &lt;- data1 %&gt;%\n  mutate(Age_grouped = cut(Age, \n                           breaks = breaks,\n                           include.lowest = TRUE,\n                           right = TRUE))\n\n\ndata1$Age_grouped &lt;- as.factor(data1$Age_grouped)\n\nfiction_age_grouped &lt;- data1 %&gt;%\n  group_by(Fictional_story, Age_grouped) %&gt;% summarise(Count = n(), .groups = 'drop') %&gt;%\n  mutate('Percentage' = Count / sum(Count) * 100)\n\nggplot(fiction_age_grouped, aes(x = Fictional_story, y = Percentage, fill = Age_grouped)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  labs(x = \"Fictional_story\", y = \"Percentage\", fill = \"Age Group\") +\n  ggtitle(\"Percentage in Each Level for Fictional Story by Age Group\") +\n  theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nTo create an ordinal regression model, we use the clm() function. Here’s a simple example showing the relationship between age and likelihood of imagining a fictional story based on data from the first half of the concert.\n\nmodel_fiction_age &lt;- clm(Fictional_story ~ Age, data = data1, Hess = TRUE)\n\nmodel_fiction_age %&gt;% \n  tidy() %&gt;%\n  kable()\n\n\n\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\ncoef.type\n\n\n\n\nNot at all|A small amount of the time\n-1.2000202\n0.5581174\n-2.1501215\n0.0315456\nintercept\n\n\nA small amount of the time|A moderate amount of the time\n-0.0056613\n0.5409042\n-0.0104663\n0.9916492\nintercept\n\n\nA moderate amount of the time|Most of the time\n1.0067653\n0.5656944\n1.7796981\n0.0751254\nintercept\n\n\nMost of the time|All of the time\n2.4637137\n0.7068055\n3.4857024\n0.0004908\nintercept\n\n\nAge\n-0.0118818\n0.0095693\n-1.2416588\n0.2143625\nlocation\n\n\n\n\n\nBased on the model outcome for the ‘Age’ term (estimate = -0.0119), we can see that as age increases, respondents are less likely to choose higher categories (e.g. less likely to report experiencing a fictional story frequently). However, p = 0.214, so this is not statistically significant.\nggemmeans can be used to visualise the model.\n\npredictions &lt;- ggemmeans(model_fiction_age, terms = \"Age\")\n\nggplot(predictions, aes(x = x, y = predicted, fill = response.level)) +\n  geom_area() + \n  labs(x = \"\\nAge\", \n       y = \"Predicted Probability\\n\", \n       title = \"Fictional_story by Age\") +\n  scale_fill_manual(\n    name = NULL,\n    values = c(\"#deebf7\", \"#9ecae1\", \"#3182bd\", \"#08519c\", \"#08306b\"),\n    labels = c(\"Not at all\",\n               \"A small amount of the time\",\n               \"A moderate amount of the time\",\n               \"Most of the time\",\n               \"All of the time\")\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\nIt’s also good to run a brant test to tell us whether the proportional odds assumption holds in our current model. The assumption is that the relationship between predictor and output is the same across all levels of the ordinal outcomes.\n\nbrant.test(model_fiction_age)\n\n\nBrant Test:\n           chi-sq   df   pr(&gt;chi)\nOmnibus      2.64    3       0.45\nAge          2.64    3       0.45\n\nH0: Proportional odds assumption holds\n\n\nFrom the above, we can see that the proportional odds assumption does hold in our model.\nMODEL COMPARISONS\nLet’s do some comparing comparison now. Here we’re going to integrate age and gender into the same model.\n\nFiction_int = clm(Fictional_story ~ Gender*Age, data=data1)\n\n    tidy(Fiction_int) %&gt;%\n      kable()\n\n\n\n\n\n\n\n\n\n\n\n\nterm\nestimate\nstd.error\nstatistic\np.value\ncoef.type\n\n\n\n\nNot at all|A small amount of the time\n-0.9149422\n0.8400896\n-1.0891007\n0.2761095\nintercept\n\n\nA small amount of the time|A moderate amount of the time\n0.3051990\n0.8402217\n0.3632362\n0.7164284\nintercept\n\n\nA moderate amount of the time|Most of the time\n1.3205635\n0.8608620\n1.5340014\n0.1250293\nintercept\n\n\nMost of the time|All of the time\n2.7692707\n0.9543832\n2.9016340\n0.0037122\nintercept\n\n\nGenderFemale\n0.5410978\n1.0907027\n0.4961002\n0.6198237\nlocation\n\n\nAge\n-0.0033337\n0.0145300\n-0.2294329\n0.8185324\nlocation\n\n\nGenderFemale:Age\n-0.0161627\n0.0194180\n-0.8323554\n0.4052083\nlocation\n\n\n\n\n\nWe can compare this against the model using just age.\n\nmodel_int &lt;- clm(Fictional_story ~ Gender*Age, data = data1)\nmodel_no_int &lt;- clm(Fictional_story ~ Age, data = data1)\n\nanova(model_int, model_no_int) %&gt;% kable()\n\n\n\n\n\nno.par\nAIC\nlogLik\nLR.stat\ndf\nPr(&gt;Chisq)\n\n\n\n\nmodel_no_int\n5\n269.0693\n-129.5346\nNA\nNA\nNA\n\n\nmodel_int\n7\n271.7126\n-128.8563\n1.356628\n2\n0.507472\n\n\n\n\n\nHere the p value is still significantly above 0.05, so adding gender as an interaction variable doesn’t significantly improve the model.\nThe question is, how can we select the correct models with the optimum demographic inputs? This is what will be covered in the ‘Model Selection’ portion of this blog."
  },
  {
    "objectID": "posts/Dataset_overview/Dataset_overview.html",
    "href": "posts/Dataset_overview/Dataset_overview.html",
    "title": "Dataset_overview",
    "section": "",
    "text": "This dataset examines the musical imaginings that people experience in a live concert setting. The data was collected in a survey format.\nFor some background, the survey in question was distributed at a classical concert in the Princeton University Concerts series (Feb 20th, 2025). During the concert’s intermission, and at the end of the concert, audience members answered a series of questions designed to scrutinise the nature of their imaginative responses to the music performed. Distribution was via both paper surveys, and online using Qualtrics. In each part of the survey, the audience were asked about the frequency with which they experienced different types of thought, memory and imagining. They then identified the musical movements during which they imagined the most vivid fictional scenes and memories, and provided free-text responses describing these.\nYou can find a PDF of the paper survey here for reference:\nhttps://raw.githubusercontent.com/hw3446/Final_Project_PUC/59ab7bc00c7b9a0fc35517cc5b3335cf23fdc4ab/Paper_survey.pdf\n\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(dplyr)\nlibrary(ggplot2)\n\nThe data is in two halves for intermission and post-concert data. It is also divided into paper and online data. We’ll start by loading all the intermission data.\n\nlibrary(conflicted)\nconflict_prefer(\"filter\", \"dplyr\")\n\ndata_paper &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/input/PUC1.csv\")\n\ndata_qualtrics &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/input_qualtrics/PUC1.csv\")\n\nIn order to combine the two intermission datasets, we need to reshape them a little bit.\n\n##Here I'm just recoding some of the numeric values in the paper dataset to align with their likert scale values, for readability.\n\nrecode &lt;- c(\"1\" = \"Not at all\",\n                \"2\" = \"A small amount of the time\",\n                \"3\" = \"A moderate amount of the time\",\n                \"4\" = \"Most of the time\",\n                \"5\" = \"All of the time\")\n\nrecode2 &lt;- c(\"1\" = \"Not at all\",\n             \"2\" = \"Slightly\",\n             \"3\" = \"Moderately\",\n             \"4\" = \"Mostly\",\n             \"5\" = \"Entirely\")\n\nrecode3 &lt;- c(\"1\" = \"Very rarely\",\n             \"2\" = \"Somewhat rarely\",\n             \"3\" = \"Moderately frequently\",\n             \"4\" = \"Frequently\",\n             \"5\" = \"Very frequently\")\n\ndata_paper[, 2:10] &lt;- lapply(data_paper[, 2:10], function(x) recode[as.character(x)])\ndata_paper[, 13:15] &lt;- lapply(data_paper[, 13:15], function(x) recode2[as.character(x)])\ndata_paper[, 18:20] &lt;- lapply(data_paper[, 18:20], function(x) recode2[as.character(x)])\ndata_paper[, 24] &lt;- lapply(data_paper[, 24], function(x) recode3[as.character(x)])\n\nIn the qualtrics data there are some extra columns that we don’t need, so we’re getting rid of those.\n\ndata_qualtrics &lt;- data_qualtrics %&gt;% dplyr::filter(Finished == \"TRUE\") %&gt;% \n  dplyr::select(-StartDate, -EndDate, -Status, -Progress, -Duration, \n         -RecordedDate, -DistributionChannel, -UserLanguage, -Finished, -Q1, -ResponseId)\n\nThe way people select composer and movement is different for the paper and online surveys, so we need to get them in a matching format.\n\ncomposer_initials &lt;- data.frame(\n  composer = c(\"Beethoven\", \"Hough\"),\n  composer_initial = c(\"B\", \"H\")\n)\n\ndata_long &lt;- data_qualtrics %&gt;%\n  pivot_longer(\n    cols = starts_with(\"Movement\"),\n    names_to = \"source_col\",\n    values_to = \"movement_label\"\n  ) %&gt;%\n  filter(!is.na(movement_label)) %&gt;%\n  mutate(\n    composer = case_when(\n      str_detect(source_col, \"_B_\") ~ \"Beethoven\",\n      str_detect(source_col, \"_H_\") ~ \"Hough\"\n    ),\n    type = case_when(\n      str_detect(source_col, \"_mem$\") ~ \"mem\",\n      str_detect(source_col, \"_story$\") ~ \"story\"\n    ),\n    movement = as.integer(str_extract(movement_label, \"\\\\d+\"))\n  ) %&gt;%\n  left_join(composer_initials, by = \"composer\") %&gt;%\n  mutate(code = paste0(composer_initial, movement))\n\ndata_wide &lt;- data_long %&gt;%\n  dplyr::select(ID, type, code) %&gt;%\n  pivot_wider(\n    names_from = type,\n    values_from = code,\n    names_prefix = \"Movement_\"\n  )\n\nfinal_qualtrics &lt;- data_qualtrics %&gt;%\n  left_join(data_wide, by = \"ID\")\n\nNow we can combine the dataframes:\n\ndata &lt;- bind_rows(data_paper, final_qualtrics)\ndata &lt;- data%&gt;% dplyr::select(-Movement_H_story, -Movement_B_story, -Piece_story, -Movement_H_mem, -Movement_B_mem, -Piece_mem)\n\nNote: to keep track of participants between each half of the survey, they were given a random ID in qualtrics, or were manually numbered in the paper data. We’re keeping hold of these columns for now so we can match the demographic variables to the right participant when we load the post-concert data. But essentially, participants who were online won’t have a participant number, and paper participants won’t have an ID.\nTo view the combined dataset:\n\nlibrary(DT)\ndatatable(data)\n\n\n\n\n\nSECOND HALF\nThese next steps essentially repeat the above, but for the post-concert data.\nLoading the data:\n\ndata_paper2 &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/input/PUC2.csv\")\n\ndata_qualtrics2 &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/input_qualtrics/PUC2.csv\")\n\nRecoding / removing unnecessary columns:\n\nrecode &lt;- c(\"1\" = \"Not at all\",\n                \"2\" = \"A small amount of the time\",\n                \"3\" = \"A moderate amount of the time\",\n                \"4\" = \"Most of the time\",\n                \"5\" = \"All of the time\")\n\nrecode2 &lt;- c(\"1\" = \"Not at all\",\n             \"2\" = \"Slightly\",\n             \"3\" = \"Moderately\",\n             \"4\" = \"Mostly\",\n             \"5\" = \"Entirely\")\n\ndata_paper2[, 2:10] &lt;- lapply(data_paper2[, 2:10], function(x) recode[as.character(x)])\ndata_paper2[, 13:15] &lt;- lapply(data_paper2[, 13:15], function(x) recode2[as.character(x)])\ndata_paper2[, 18:20] &lt;- lapply(data_paper2[, 18:20], function(x) recode2[as.character(x)])\n\ndata_qualtrics2 &lt;- data_qualtrics2 %&gt;% dplyr::filter(Finished == \"TRUE\") %&gt;% \n  dplyr::select(-StartDate, -EndDate, -Status, -Progress, -Duration, \n         -RecordedDate, -DistributionChannel, -UserLanguage, -Finished, -ResponseId)\n\nReworking Qualtrics data so the formats match:\n\nfinal_qualtrics2 &lt;- data_qualtrics2 %&gt;%\n    filter(!is.na(Movement_mem)) %&gt;% filter(!is.na(Movement_story)) %&gt;%\n  mutate(Movement_mem = paste0(\"Br\", str_extract(Movement_mem, \"\\\\d+\"))) %&gt;%\n    mutate(Movement_story = paste0(\"Br\", str_extract(Movement_story, \"\\\\d+\")))\n\nCombining Qualtrics and paper data:\n\ndata2 &lt;- bind_rows(data_paper2, final_qualtrics2)\n\nIMPORTANT: We need to pull the demographic information from the first half of the concert and match it to the second half, making sure it’s matched to the right participant. We can do this using the numbers and unique IDs assigned to participants.\n\ndemographics &lt;- data[, c(\"Age\", \"Gender\", \"Music_listening\", \"Practice\", \"Location\", \"Participant_number\", \"ID\")] \n\ndata2 &lt;- data2 %&gt;%\n  mutate(join_key = ifelse(!is.na(Participant_number), Participant_number, ID))\n\ndemographics &lt;- demographics %&gt;%\n  mutate(join_key = ifelse(!is.na(Participant_number), Participant_number, ID))\n\ndata2 &lt;- data2 %&gt;%\n  left_join(demographics, by = \"join_key\")\n\ndata2 &lt;- data2 %&gt;% dplyr::select(-Participant_number.y, -ID.y, -Participant_number.x, -ID.x)\n\nTo view the dataset for the second half, including the matched demographic data:\n\ndatatable(data2)\n\n\n\n\n\n(These are the two dataframes that we’ll be loading and working with in other sections of this blog.)\n\nwrite.csv(data, \"working_data/data.csv\", row.names = FALSE)\nwrite.csv(data2, \"working_data/data2.csv\", row.names = FALSE)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this blog"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Tutorial",
    "section": "",
    "text": "An overview of the dataset\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSome descriptive visualisations\n\n\n\n\n\n\n\n\n\n\n\nHannah Wilkie\n\n\n\n\n\n\n\n\n\n\n\n\nOrdinal regression: model Selection\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOrdinal regression: final models\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOrdinal regression: an overview\n\n\n\n\n\n\nnews\n\n\ncode\n\n\nanalysis\n\n\n\n\n\n\n\n\n\nApr 22, 2025\n\n\nHannah Wilkie\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Descriptive_1/Descriptive1.html",
    "href": "posts/Descriptive_1/Descriptive1.html",
    "title": "Distribution of thought types and movements with most imaginings",
    "section": "",
    "text": "In this section we’ll look at the overall distribution of different thought types and movements in the datasets.\n\nlibrary(tidyverse)\nlibrary(broom)\nlibrary(dplyr)\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(knitr)\nlibrary(skimr)\n\nHere are the dataframes that we tidied up in the dataset overview page.\n\ndata &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/posts/Dataset_overview/working_data/data.csv\")\n\ndata2 &lt;- read_csv(\"https://raw.githubusercontent.com/hw3446/Final_Project_PUC/main/posts/Dataset_overview/working_data/data2.csv\")\n\nWe’ll start by visualising the counts for each type of thought in each half of the concert. Here we’re creating a dataframe showing thought types in a long format with counts for each.\n\nthought_types &lt;- c(\"Fictional_story\", \"Abstract_shapes\", \"Sensory_sensations\", \"Life_experiences\", \"Media\", \"Music\", \"Future_plans\", \"Building\", \"Everyday\")\n\n#First half of concert\nthoughts_long1 &lt;- data %&gt;%\n  pivot_longer(cols = thought_types,\n               names_to = \"Category\", \n               values_to = \"Response\") %&gt;%\n  count(Category, Response) %&gt;% \n  mutate(Response = factor(Response, \n                           levels = c(\"Not at all\", \n                                      \"A small amount of the time\", \n                                      \"A moderate amount of the time\", \n                                      \"Most of the time\", \n                                      \"All of the time\"))) %&gt;% \n  mutate(Category = factor(Category, levels = rev(c(\"Fictional_story\", \n                                                    \"Abstract_shapes\", \n                                                    \"Sensory_sensations\", \n                                                    \"Life_experiences\", \n                                                    \"Media\", \n                                                    \"Music\", \n                                                    \"Future_plans\", \n                                                    \"Building\", \n                                                    \"Everyday\")))) %&gt;% filter(!is.na(Response))\n\n#Second half of concert\nthoughts_long2 &lt;- data2 %&gt;%\n  pivot_longer(cols = thought_types,\n               names_to = \"Category\", \n               values_to = \"Response\") %&gt;%\n  count(Category, Response) %&gt;% \n  mutate(Response = factor(Response, \n                           levels = c(\"Not at all\", \n                                      \"A small amount of the time\", \n                                      \"A moderate amount of the time\", \n                                      \"Most of the time\", \n                                      \"All of the time\"))) %&gt;% \n  mutate(Category = factor(Category, \n                           levels = rev(c(\"Fictional_story\", \n                                          \"Abstract_shapes\", \n                                          \"Sensory_sensations\", \n                                          \"Life_experiences\", \n                                          \"Media\", \n                                          \"Music\", \n                                          \"Future_plans\", \n                                          \"Building\", \n                                          \"Everyday\")))) %&gt;% \n  filter(!is.na(Response))\n\nThese dataframes are used for the first plots, which show the counts for each type of thought during each half.\n\n#First half\nggplot(thoughts_long1, aes(x = Response, y = Category, fill = n)) +\n  geom_tile(color = \"white\") +  # Add white borders to tiles\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\") + \n  labs(title = \"Counts for Thought Types, First Half\", x = NULL, y = NULL, fill = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n#Second half\nggplot(thoughts_long2, aes(x = Response, y = Category, fill = n)) +\n  geom_tile(color = \"white\") +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\") + \n  labs(title = \"Counts for Thought Types, Second Half\", x = NULL, y = NULL, fill = \"Count\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n\n\n\n\n\n\n\n\nThen we examine the counts for the movements people select as invoking the most vivid memory or story.\n\n# First half of concert, collecting movement names in usable format:\nmems &lt;- data$Movement_mem %&gt;% na.omit() %&gt;% toupper()\nstories &lt;- data$Movement_story %&gt;% na.omit() %&gt;% toupper()\n\nmovements_mem &lt;- unlist(strsplit(mems, \"[; ,]+\")) %&gt;% trimws()\nmovements_story &lt;- unlist(strsplit(stories, \"[; ,]+\")) %&gt;% trimws()\n\nmovements_mem &lt;- table(movements_mem)\nmovements_story &lt;- table(movements_story)\n\n\n# Second half of concert, collecting movement names in usable format:\nmems2 &lt;- data2$Movement_mem %&gt;% na.omit() %&gt;% toupper()\nstories2 &lt;- data2$Movement_story %&gt;% na.omit() %&gt;% toupper()\n\nmovements_mem2 &lt;- unlist(strsplit(mems2, \"[; ,]+\")) %&gt;% trimws()\nmovements_story2 &lt;- unlist(strsplit(stories2, \"[; ,]+\")) %&gt;% trimws()\n\nmovements_mem2 &lt;- table(movements_mem2)\nmovements_story2 &lt;- table(movements_story2)\n\n#Map for recoding movements using full names\nrecode_map &lt;- c(\n  \"B1\" = \"Beethoven, Movement 1 — Allegro con brio\",\n  \"B2\" = \"Beethoven, Movement 2 — Adagio affettuoso ed appassionato\",\n  \"B3\" = \"Beethoven, Movement 3 — Scherzo\",\n  \"B4\" = \"Beethoven, Movement 4 — Allegro\",\n  \"H1\" = \"Hough, Movement 1 — Au boulevard\",\n  \"H2\" = \"Hough, Movement 2 — Au parc\",\n  \"H3\" = \"Hough, Movement 3 — À l'hôtel\",\n  \"H4\" = \"Hough, Movement 4 — Au théâtre\",\n  \"H5\" = \"Hough, Movement 5 — À l'église\",\n  \"H6\" = \"Hough, Movement 6 — Au marché\",\n  \"BR1\" = \"Brahms, movement 1 — Allegro non troppo\", \n  \"BR2\" = \"Brahms, movement 2 — Andante, un poco adagio\", \n  \"BR3\" = \"Brahms, movement 3 — Scherzo: Allegro\", \n  \"BR4\" = \"Brahms, movement 4 — Finale\"\n)\n\n# Recode names in the frequency tables\nnames(movements_mem) &lt;- recode(names(movements_mem), !!!recode_map)\nnames(movements_story) &lt;- recode(names(movements_story), !!!recode_map)\nnames(movements_mem2) &lt;- recode(names(movements_mem2), !!!recode_map)\nnames(movements_story2) &lt;- recode(names(movements_story2), !!!recode_map)\n\n# Convert tables to data frames and rename columns\ndf_mem1 &lt;- as.data.frame(movements_mem)\ncolnames(df_mem1) &lt;- c(\"Movement_eliciting_memory\", \"Count\")\n\ndf_story1 &lt;- as.data.frame(movements_story)\ncolnames(df_story1) &lt;- c(\"Movement_eliciting_story\", \"Count\")\n\ndf_mem2 &lt;- as.data.frame(movements_mem2)\ncolnames(df_mem2) &lt;- c(\"Movement_eliciting_memory\", \"Count\")\n\ndf_story2 &lt;- as.data.frame(movements_story2)\ncolnames(df_story2) &lt;- c(\"Movement_eliciting_story\", \"Count\")\n\n# Display frequency tables with full movement names\nkable(df_mem1)\n\n\n\n\nMovement_eliciting_memory\nCount\n\n\n\n\nBeethoven, Movement 1 — Allegro con brio\n25\n\n\nBeethoven, Movement 2 — Adagio affettuoso ed appassionato\n30\n\n\nBeethoven, Movement 3 — Scherzo\n8\n\n\nBeethoven, Movement 4 — Allegro\n3\n\n\nHough, Movement 1 — Au boulevard\n8\n\n\nHough, Movement 2 — Au parc\n11\n\n\nHough, Movement 3 — À l’hôtel\n5\n\n\nHough, Movement 4 — Au théâtre\n10\n\n\nHough, Movement 5 — À l’église\n11\n\n\nHough, Movement 6 — Au marché\n14\n\n\n\n\nkable(df_story1)\n\n\n\n\nMovement_eliciting_story\nCount\n\n\n\n\nBeethoven, Movement 1 — Allegro con brio\n8\n\n\nBeethoven, Movement 2 — Adagio affettuoso ed appassionato\n17\n\n\nBeethoven, Movement 3 — Scherzo\n9\n\n\nBeethoven, Movement 4 — Allegro\n6\n\n\nHough, Movement 1 — Au boulevard\n8\n\n\nHough, Movement 2 — Au parc\n11\n\n\nHough, Movement 3 — À l’hôtel\n5\n\n\nHough, Movement 4 — Au théâtre\n21\n\n\nHough, Movement 5 — À l’église\n7\n\n\nHough, Movement 6 — Au marché\n12\n\n\n\n\nkable(df_mem2)\n\n\n\n\nMovement_eliciting_memory\nCount\n\n\n\n\nBrahms, movement 1 — Allegro non troppo\n22\n\n\nBrahms, movement 2 — Andante, un poco adagio\n23\n\n\nBrahms, movement 3 — Scherzo: Allegro\n31\n\n\nBrahms, movement 4 — Finale\n14\n\n\n\n\nkable(df_story2)\n\n\n\n\nMovement_eliciting_story\nCount\n\n\n\n\nBrahms, movement 1 — Allegro non troppo\n14\n\n\nBrahms, movement 2 — Andante, un poco adagio\n18\n\n\nBrahms, movement 3 — Scherzo: Allegro\n25\n\n\nBrahms, movement 4 — Finale\n20\n\n\n\n\n\nThese can be plotted:\n\n# Add a Composer column (Beethoven for B1-B4, Hough for H1-H6)\ndf_mem1$Composer &lt;- ifelse(grepl(\"^Beethoven\", df_mem1$Movement_eliciting_memory), \"Beethoven\", \"Hough\")\ndf_story1$Composer &lt;- ifelse(grepl(\"^Beethoven\", df_story1$Movement_eliciting_story), \"Beethoven\", \"Hough\")\n\n# Set movement factor levels for proper ordering\ndf_mem1$Movement &lt;- factor(df_mem1$Movement, levels = recode_map)\ndf_story1$Movement &lt;- factor(df_story1$Movement, levels = recode_map)\n\n# Plot for memories, first half\nmem_plot1 &lt;- ggplot(df_mem1, aes(x = Movement_eliciting_memory, y = Count, fill = Movement_eliciting_memory)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~ Composer, scales = \"free_x\") +  # Separate Beethoven & Hough\n  theme_minimal() +\n  labs(title = \"Movement Counts for Memories, First Half\", x = \"Movement\", y = \"Count\") +\n theme(axis.title.x = element_blank(),  \n        axis.text.x = element_blank(),  \n        axis.ticks.x = element_blank()) +\n  scale_fill_brewer(palette = \"Set3\") + \n  guides(fill = guide_legend(title = \"Movement\")) +\n  scale_y_continuous(breaks = scales::breaks_pretty(n = 5)) \n\n# Plot for stories, first half\nstory_plot1 &lt;- ggplot(df_story1, aes(x = Movement_eliciting_story, y = Count, fill = Movement_eliciting_story)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  facet_wrap(~ Composer, scales = \"free_x\") +  \n  theme_minimal() +\n  labs(title = \"Movement Counts for Stories, First Half\", x = \"Movement\", y = \"Count\") +\n theme(axis.title.x = element_blank(),  \n        axis.text.x = element_blank(),   \n        axis.ticks.x = element_blank()) +\n  scale_fill_brewer(palette = \"Set3\") + \n  guides(fill = guide_legend(title = \"Movement\")) +\n  scale_y_continuous(breaks = scales::breaks_pretty(n = 5)) \n\n\n##Second Half\n# Set movement factor levels for proper ordering\ndf_mem2$Movement_eliciting_memory &lt;- factor(df_mem2$Movement_eliciting_memory, levels = recode_map)\ndf_story2$Movement_eliciting_story &lt;- factor(df_story2$Movement_eliciting_story, levels = recode_map)\n\n# Plot for memories, second half\nmem_plot2 &lt;- ggplot(df_mem2, aes(x = Movement_eliciting_memory, y = Count, fill = Movement_eliciting_memory)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  theme_minimal() +\n  labs(title = \"Movement Counts for Memories, Second Half\", x = \"Movement\", y = \"Count\") +\n theme(axis.title.x = element_blank(), \n        axis.text.x = element_blank(),  \n        axis.ticks.x = element_blank()) +\n  scale_fill_brewer(palette = \"Set3\") + \n  guides(fill = guide_legend(title = \"Movement\")) +\n  scale_y_continuous(breaks = scales::breaks_pretty(n = 5))  \n\n# Plot for stories, second half\nstory_plot2 &lt;- ggplot(df_story2, aes(x = Movement_eliciting_story, y = Count, fill = Movement_eliciting_story)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  theme_minimal() +\n  labs(title = \"Movement Counts for Stories, Second Half\", x = \"Movement\", y = \"Count\") +\n theme(axis.title.x = element_blank(),  \n        axis.text.x = element_blank(),  \n        axis.ticks.x = element_blank()) +\n  scale_fill_brewer(palette = \"Set3\") + \n  guides(fill = guide_legend(title = \"Movement\")) +\n  scale_y_continuous(breaks = scales::breaks_pretty(n = 5)) \n\nmem_plot1\n\n\n\n\n\n\n\nstory_plot1\n\n\n\n\n\n\n\nmem_plot2\n\n\n\n\n\n\n\nstory_plot2\n\n\n\n\n\n\n\n\nWe can also get a summary of the structure of each dataframe.\n\nskim(data)\n\n\nData summary\n\n\nName\ndata\n\n\nNumber of rows\n103\n\n\nNumber of columns\n27\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n26\n\n\nnumeric\n1\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFictional_story\n4\n0.96\n10\n29\n0\n5\n0\n\n\nAbstract_shapes\n2\n0.98\n10\n29\n0\n5\n0\n\n\nSensory_sensations\n4\n0.96\n10\n29\n0\n4\n0\n\n\nLife_experiences\n7\n0.93\n10\n29\n0\n5\n0\n\n\nMedia\n5\n0.95\n10\n29\n0\n4\n0\n\n\nMusic\n3\n0.97\n10\n29\n0\n5\n0\n\n\nFuture_plans\n8\n0.92\n10\n29\n0\n5\n0\n\n\nBuilding\n6\n0.94\n10\n29\n0\n5\n0\n\n\nEveryday\n8\n0.92\n10\n29\n0\n5\n0\n\n\nMovement_mem\n6\n0.94\n2\n18\n0\n27\n0\n\n\nMem_description\n15\n0.85\n6\n705\n0\n88\n0\n\n\nMem_music_evoked\n5\n0.95\n6\n10\n0\n5\n0\n\n\nMem_spontaneity\n5\n0.95\n6\n10\n0\n5\n0\n\n\nMem_individuality\n6\n0.94\n6\n10\n0\n5\n0\n\n\nMovement_story\n22\n0.79\n2\n26\n0\n17\n0\n\n\nStory_description\n25\n0.76\n3\n787\n0\n77\n0\n\n\nStory_music_evoked\n11\n0.89\n6\n10\n0\n5\n0\n\n\nStory_spontaneity\n12\n0.88\n6\n10\n0\n5\n0\n\n\nStory_individuality\n11\n0.89\n6\n10\n0\n5\n0\n\n\nOther_info\n72\n0.30\n4\n473\n0\n31\n0\n\n\nAge\n6\n0.94\n2\n26\n0\n55\n0\n\n\nGender\n2\n0.98\n1\n6\n0\n6\n0\n\n\nMusic_listening\n3\n0.97\n10\n21\n0\n5\n0\n\n\nPractice\n14\n0.86\n1\n65\n0\n48\n0\n\n\nLocation\n3\n0.97\n1\n1\n0\n12\n0\n\n\nID\n54\n0.48\n3\n10\n0\n48\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\nParticipant_number\n49\n0.52\n27.5\n15.73\n1\n14.25\n27.5\n40.75\n54\n▇▇▇▇▇\n\n\n\n\nskim(data2)\n\n\nData summary\n\n\nName\ndata2\n\n\nNumber of rows\n92\n\n\nNumber of columns\n27\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n27\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nFictional_story\n0\n1.00\n10\n29\n0\n5\n0\n\n\nAbstract_shapes\n5\n0.95\n10\n29\n0\n5\n0\n\n\nSensory_sensations\n3\n0.97\n10\n29\n0\n4\n0\n\n\nLife_experiences\n3\n0.97\n10\n29\n0\n5\n0\n\n\nMedia\n5\n0.95\n10\n29\n0\n5\n0\n\n\nMusic\n1\n0.99\n10\n29\n0\n5\n0\n\n\nFuture_plans\n3\n0.97\n10\n29\n0\n5\n0\n\n\nBuilding\n4\n0.96\n10\n29\n0\n5\n0\n\n\nEveryday\n4\n0.96\n10\n29\n0\n5\n0\n\n\nMovement_mem\n11\n0.88\n3\n18\n0\n11\n0\n\n\nMem_description\n13\n0.86\n3\n480\n0\n79\n0\n\n\nMem_music_evoked\n8\n0.91\n6\n10\n0\n5\n0\n\n\nMem_spontaneity\n10\n0.89\n6\n10\n0\n5\n0\n\n\nMem_individuality\n8\n0.91\n6\n10\n0\n5\n0\n\n\nMovement_story\n20\n0.78\n3\n8\n0\n8\n0\n\n\nStory_description\n21\n0.77\n3\n440\n0\n71\n0\n\n\nStory_music_evoked\n15\n0.84\n6\n10\n0\n5\n0\n\n\nStory_spontaneity\n15\n0.84\n6\n10\n0\n5\n0\n\n\nStory_individuality\n16\n0.83\n6\n10\n0\n5\n0\n\n\nOther_info\n72\n0.22\n2\n209\n0\n20\n0\n\n\nFeedback\n51\n0.45\n2\n351\n0\n40\n0\n\n\njoin_key\n0\n1.00\n1\n10\n0\n92\n0\n\n\nAge\n6\n0.93\n2\n26\n0\n52\n0\n\n\nGender\n2\n0.98\n1\n6\n0\n6\n0\n\n\nMusic_listening\n3\n0.97\n10\n21\n0\n5\n0\n\n\nPractice\n14\n0.85\n1\n65\n0\n45\n0\n\n\nLocation\n3\n0.97\n1\n1\n0\n12\n0\n\n\n\n\n\nDEMOGRAPHIC INFO\nWe’ll get a quick overview of our demographic data. Note, first we’re going to add a ‘Floor’ column based on participants’ location in the hall. Having this info is useful, as concert subscribers sit downstairs in our auditorium.\nHere’s a map of each location in the hall for reeference:\n\n\ndata &lt;- data %&gt;%\n  mutate(Floor = ifelse(Location %in% c(\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"), \"Downstairs\", \"Upstairs\")) %&gt;% relocate(Floor, .after = Location)\n\nHere’s an overview of our demographics variables:\n\ndemographics &lt;- c('Age', 'Gender', 'Music_listening', 'Practice', 'Floor')\ndemographics_data &lt;- dplyr::select(data, all_of(demographics))\nskim(demographics_data)\n\n\nData summary\n\n\nName\ndemographics_data\n\n\nNumber of rows\n103\n\n\nNumber of columns\n5\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\nn_missing\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nAge\n6\n0.94\n2\n26\n0\n55\n0\n\n\nGender\n2\n0.98\n1\n6\n0\n6\n0\n\n\nMusic_listening\n3\n0.97\n10\n21\n0\n5\n0\n\n\nPractice\n14\n0.86\n1\n65\n0\n48\n0\n\n\nFloor\n0\n1.00\n8\n10\n0\n2\n0"
  }
]